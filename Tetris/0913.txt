1
#include <stdio.h>
#include <Windows.h>
#pragma warning (disable:4996)

int main()
{
	COORD p1 = { 0, 0 }; // Window.h에 포함된 구조체, 콘솔의 좌표
	COORD p2 = { 12, 6 };

	HANDLE myConsole; // 콘솔을 다루는 HANDLE형 변수
	myConsole = GetStdHandle(STD_OUTPUT_HANDLE); //표준콘솔출력의 핸들반환

	SetConsoleCursorPosition(myConsole, p1); // 콘솔의 커서를 p1으로 이동시키는 함수
	printf("■");
	
	SetConsoleCursorPosition(myConsole, p2);
	printf("■");

	getchar();

	return 0;
}
=================================================================================
2
#include <stdio.h>
#include <Windows.h>
#pragma warning (disable:4996)

int main()
{
	COORD p1;

	HANDLE myConsole;
	myConsole = GetStdHandle(STD_OUTPUT_HANDLE);

	p1.X = 0;
	p1.Y = 0;
	SetConsoleCursorPosition(myConsole, p1);
	printf("■");
	
	p1.X = 12;
	p1.Y = 6;
	SetConsoleCursorPosition(myConsole, p1);
	printf("■");

	getchar();

	return 0;
}
=================================================================================
3
#include <stdio.h>
#include <Windows.h>
#pragma warning (disable:4996)

int main()
{
	COORD p1;

	p1.X = 0;
	p1.Y = 0;
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), p1);
	printf("■");
	
	p1.X = 12;
	p1.Y = 6;
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), p1);
	printf("■");

	getchar();

	return 0;
}
=================================================================================
4
#include <stdio.h>
#include <Windows.h>
#pragma warning (disable:4996)

int main()
{
	COORD p1 = { 0 , 0 };

	HANDLE myConsole;
	myConsole = GetStdHandle(STD_OUTPUT_HANDLE);

	for (int i = 0; i < 24; i += 2)
	{
		for (int j = 0; j < 3; j++)
		{
			p1.X = i;
			p1.Y = j * 6;
			SetConsoleCursorPosition(myConsole, p1);
			printf("■");
		}
	}
	getchar();

	return 0;
}
=================================================================================
5
#include <stdio.h>
#include <Windows.h>
#pragma warning (disable:4996)

int main()
{
	COORD p1 = { 0 , 0 };

	for (int i = 0; i < 12; i ++)
	{
		for (int j = 0; j < 3; j++)
		{
			p1.Y = i;
			p1.X = j * 6;
			SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), p1);
			printf("■");
		}
	}

	getchar();

	return 0;
}
=================================================================================
6 사각형
#include <stdio.h>
#include <Windows.h>
#pragma warning (disable:4996)

int main()
{
	COORD p1 = { 0 , 0 };

	for (int i = 0; i < 24; i+=2)
	{
		for (int j = 0; j < 12; j++)
		{
			if (j == 0 || j == 11)
			{
				p1.X = i;
				p1.Y = j;
				SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), p1);
				printf("■");
			}
			else
			{
				p1.X = 0;
				p1.Y = j;
				SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), p1);
				printf("■");

				p1.X = 22;
				p1.Y = j;
				SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), p1);
				printf("■");
			}

		}
	}

	getchar();

	return 0;
}
=================================================================================
7 삼각형
#include <stdio.h>
#include <Windows.h>
#pragma warning (disable:4996)

int main()
{
	COORD p1 = { 0 , 0 };
	int k = 0;

	for (int i = 0; i < 11; i++)
	{
		for (int j = 0; j < 42; j += 2)
		{
			if (i == 0)
			{
				p1.X = 20;
				p1.Y = i;
				SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), p1);
				printf("■");
			}
			else if(i == 10)
			{
				p1.X = j;
				p1.Y = i;
				SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), p1);
				printf("■");
			}
			else
			{
				p1.X = 20+k;
				p1.Y = i;
				SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), p1);
				printf("■");

				p1.X = 20-k;
				p1.Y = i;
				SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), p1);
				printf("■");
			}
		}
		k += 2;
	}

	getchar();

	return 0;
}
=================================================================================
8
#include <stdio.h>

#include <windows.h>

int main(void)

{

	CONSOLE_SCREEN_BUFFER_INFO curInfo;       // structure included in windows.h

	HANDLE console;

	console = GetStdHandle(STD_OUTPUT_HANDLE);

	GetConsoleScreenBufferInfo(console, &curInfo);

	printf("[%d, %d] \n", curInfo.dwCursorPosition.X, curInfo.dwCursorPosition.Y);

	puts("첫번째 안녕하세요");



	GetConsoleScreenBufferInfo(console, &curInfo);

	printf("[%d, %d] \n", curInfo.dwCursorPosition.X, curInfo.dwCursorPosition.Y);

	puts("두번째 안녕하세요");



	getchar();

	return 0;
}

=================================================================================
9 블럭 찍기
#include <stdio.h>
#include <windows.h>

char blockModel[][4][4] =
{
	{
		{ 0, 0, 0, 0 },
		{ 1, 0, 0, 0 },
		{ 1, 1, 1, 0 },
		{ 0, 0, 0, 0 }
	},
	{
		{ 0, 0, 0, 0 },
		{ 0, 0, 1, 0 },
		{ 1, 1, 1, 0 },
		{ 0, 0, 0, 0 }
	},
	{
		{ 0, 0, 0, 0 },
		{ 0, 1, 0, 0 },
		{ 1, 1, 1, 0 },
		{ 0, 0, 0, 0 }
	},
	{
		{ 0, 1, 0, 0 },
		{ 0, 1, 0, 0 },
		{ 0, 1, 0, 0 },
		{ 0, 1, 0, 0 }
	},
	{
		{ 0, 0, 0, 0 },
		{ 0, 1, 1, 0 },
		{ 0, 1, 1, 0 },
		{ 0, 0, 0, 0 }
	},
	{
		{ 0, 0, 0, 0 },
		{ 0, 1, 1, 0 },
		{ 1, 1, 0, 0 },
		{ 0, 0, 0, 0 }
	},
	{
		{ 0, 0, 0, 0 },
		{ 1, 1, 0, 0 },
		{ 0, 1, 1, 0 },
		{ 0, 0, 0, 0 }
	}
};

void ShowBlock(char blockInfo[4][4]);
void SetCurrentCursorPos(int x, int y);
COORD GetCurrentCursorPos(void);

int main()
{
	int k = 0;
	for(int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			SetCurrentCursorPos(j*10, i*10);
			ShowBlock(blockModel[k]);
			k++;
		}
	}

	SetCurrentCursorPos(0, 25);
	getchar();

	return 0;
}


void SetCurrentCursorPos(int x, int y)
{
	COORD pos = { x, y };

	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), pos);

	return;
}

COORD GetCurrentCursorPos(void)
{
	COORD curPoint;
	CONSOLE_SCREEN_BUFFER_INFO curInfo;

	GetConsoleScreenBufferInfo(GetStdHandle(STD_OUTPUT_HANDLE), &curInfo);

	curPoint.X = curInfo.dwCursorPosition.X;
	curPoint.Y = curInfo.dwCursorPosition.Y;

	return curPoint;
}

void ShowBlock(char blockInfo[4][4])
{
	int x, y;

	COORD curPos = GetCurrentCursorPos();

	for (y = 0; y < 4; y++)
	{
		for (x = 0; x < 4; x++)
		{
			SetCurrentCursorPos(curPos.X + (x * 2), curPos.Y + y);

			if (blockInfo[y][x] == 1)
				printf("■");
		}

	}

	SetCurrentCursorPos(curPos.X, curPos.Y);

	return;
}
